/* Mixin */
/*======================================================================================================================*/


// to rem
@function rem($pixels, $context: $fontSize) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px
  }
  @if (unitless($context)) {
    $context: $context * 1px
  }
  @return $pixels / $context * 1rem
}


  // size to one line
@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}


// media
@mixin mediaMixin($minMax, $width) {
  @media only screen and (#{$minMax}-width: #{$width}px) {
    @content
  }
}
@mixin mediaDevices($name) {
  $device: map-get($devices, $name);
  @media #{$device} {
    @content
  }
}

// ieFix
@mixin ieFix($color) {
  @media all and (-ms-high-contrast: none) {
    background: transparent !important;
    color: #{$color} !important;
  }
}
// keyframes
@mixin animation($name) {
  @keyframes #{$name} {
    @content
  }
}

// gradientText
@mixin gradientText($direction, $fColor, $fColorPercent, $sColor, $sColorPercent) {
  background: linear-gradient(to #{$direction}, #{$fColor} #{$fColorPercent}, #{$sColor} #{$sColorPercent});
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  @include ieFix(#{$fColor})
}


// to em
@function em-separator($list) {
  @if function-exists("list-separator") == true {
    @return list-separator($list);
  }

  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }

  @return if($test-list == $list, space, comma);
}

@function em($values...) {
  $context: nth($values, length($values));
  $result: ();
  $separator: em-separator($values);

  @for $i from 1 through length($values) - 1 {
    $value: nth($values, $i);
    @if type-of($value) == "number" and unit($value) == "px" {
      $result: append($result, $value / $context * 1em, $separator);
    } @else if type-of($value) == "list" {
      $result: append($result, em(append($value, $context)...), $separator);
    } @else {
      $result: append($result, $value, $separator);
    }
  }

  @return if(length($result) == 1, nth($result, 1), $result);
}

@mixin em($properties, $context) {
  @each $property in map-keys($properties) {
    #{$property}: em(append(map-get($properties, $property), $context)...);
  }
}
